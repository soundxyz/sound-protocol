/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IMerkleDropMinterInterface extends utils.Interface {
  functions: {
    "affiliateFeesAccrued(address)": FunctionFragment;
    "createEditionMint(address,bytes32,uint96,uint32,uint32,uint32,uint32)": FunctionFragment;
    "isAffiliated(address,uint256,address)": FunctionFragment;
    "mint(address,uint256,uint32,bytes32[],address)": FunctionFragment;
    "mintedTallies(address,uint256,address)": FunctionFragment;
    "moduleInterfaceId()": FunctionFragment;
    "nextMintId()": FunctionFragment;
    "platformFeesAccrued()": FunctionFragment;
    "setAffiliateDiscount(address,uint256,uint16)": FunctionFragment;
    "setAffiliateFee(address,uint256,uint16)": FunctionFragment;
    "setEditionMintPaused(address,uint256,bool)": FunctionFragment;
    "setTimeRange(address,uint256,uint32,uint32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalPrice(address,uint256,address,uint32,bool)": FunctionFragment;
    "withdrawForAffiliate(address)": FunctionFragment;
    "withdrawForPlatform()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "affiliateFeesAccrued"
      | "createEditionMint"
      | "isAffiliated"
      | "mint"
      | "mintedTallies"
      | "moduleInterfaceId"
      | "nextMintId"
      | "platformFeesAccrued"
      | "setAffiliateDiscount"
      | "setAffiliateFee"
      | "setEditionMintPaused"
      | "setTimeRange"
      | "supportsInterface"
      | "totalPrice"
      | "withdrawForAffiliate"
      | "withdrawForPlatform"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "affiliateFeesAccrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEditionMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAffiliated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTallies",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleInterfaceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMintId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeesAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliateDiscount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliateFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEditionMintPaused",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeRange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForAffiliate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForPlatform",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "affiliateFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEditionMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAffiliated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedTallies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleInterfaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextMintId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliateDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEditionMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForPlatform",
    data: BytesLike
  ): Result;

  events: {
    "AffiliateDiscountSet(address,uint256,uint16)": EventFragment;
    "AffiliateFeeSet(address,uint256,uint16)": EventFragment;
    "DropClaimed(address,uint32)": EventFragment;
    "MerkleDropMintCreated(address,uint256,bytes32,uint96,uint32,uint32,uint32,uint32)": EventFragment;
    "MintConfigCreated(address,address,uint256,uint32,uint32)": EventFragment;
    "MintPausedSet(address,uint256,bool)": EventFragment;
    "TimeRangeSet(address,uint256,uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffiliateDiscountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AffiliateFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DropClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleDropMintCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintConfigCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPausedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeRangeSet"): EventFragment;
}

export interface AffiliateDiscountSetEventObject {
  edition: string;
  mintId: BigNumber;
  discountBPS: number;
}
export type AffiliateDiscountSetEvent = TypedEvent<
  [string, BigNumber, number],
  AffiliateDiscountSetEventObject
>;

export type AffiliateDiscountSetEventFilter =
  TypedEventFilter<AffiliateDiscountSetEvent>;

export interface AffiliateFeeSetEventObject {
  edition: string;
  mintId: BigNumber;
  feeBPS: number;
}
export type AffiliateFeeSetEvent = TypedEvent<
  [string, BigNumber, number],
  AffiliateFeeSetEventObject
>;

export type AffiliateFeeSetEventFilter = TypedEventFilter<AffiliateFeeSetEvent>;

export interface DropClaimedEventObject {
  recipient: string;
  quantity: number;
}
export type DropClaimedEvent = TypedEvent<
  [string, number],
  DropClaimedEventObject
>;

export type DropClaimedEventFilter = TypedEventFilter<DropClaimedEvent>;

export interface MerkleDropMintCreatedEventObject {
  edition: string;
  mintId: BigNumber;
  merkleRootHash: string;
  price: BigNumber;
  startTime: number;
  endTime: number;
  maxMintable: number;
  maxMintablePerAccount: number;
}
export type MerkleDropMintCreatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, number, number, number, number],
  MerkleDropMintCreatedEventObject
>;

export type MerkleDropMintCreatedEventFilter =
  TypedEventFilter<MerkleDropMintCreatedEvent>;

export interface MintConfigCreatedEventObject {
  edition: string;
  creator: string;
  mintId: BigNumber;
  startTime: number;
  endTime: number;
}
export type MintConfigCreatedEvent = TypedEvent<
  [string, string, BigNumber, number, number],
  MintConfigCreatedEventObject
>;

export type MintConfigCreatedEventFilter =
  TypedEventFilter<MintConfigCreatedEvent>;

export interface MintPausedSetEventObject {
  edition: string;
  mintId: BigNumber;
  paused: boolean;
}
export type MintPausedSetEvent = TypedEvent<
  [string, BigNumber, boolean],
  MintPausedSetEventObject
>;

export type MintPausedSetEventFilter = TypedEventFilter<MintPausedSetEvent>;

export interface TimeRangeSetEventObject {
  edition: string;
  mintId: BigNumber;
  startTime: number;
  endTime: number;
}
export type TimeRangeSetEvent = TypedEvent<
  [string, BigNumber, number, number],
  TimeRangeSetEventObject
>;

export type TimeRangeSetEventFilter = TypedEventFilter<TimeRangeSetEvent>;

export interface IMerkleDropMinter extends BaseContract {
  contractName: "IMerkleDropMinter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMerkleDropMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    affiliateFeesAccrued(
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createEditionMint(
      edition: PromiseOrValue<string>,
      merkleRootHash: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxMintable_: PromiseOrValue<BigNumberish>,
      maxMintablePerAccount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAffiliated(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      requestedQuantity: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintedTallies(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    moduleInterfaceId(overrides?: CallOverrides): Promise<[string]>;

    nextMintId(overrides?: CallOverrides): Promise<[BigNumber]>;

    platformFeesAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAffiliateDiscount(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateDiscountBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAffiliateFee(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateFeeBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEditionMintPaused(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeRange(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalPrice(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      minter: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      affiliated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawForAffiliate(
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawForPlatform(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  affiliateFeesAccrued(
    affiliate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createEditionMint(
    edition: PromiseOrValue<string>,
    merkleRootHash: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    maxMintable_: PromiseOrValue<BigNumberish>,
    maxMintablePerAccount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAffiliated(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    affiliate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    requestedQuantity: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    affiliate: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintedTallies(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moduleInterfaceId(overrides?: CallOverrides): Promise<string>;

  nextMintId(overrides?: CallOverrides): Promise<BigNumber>;

  platformFeesAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  setAffiliateDiscount(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    affiliateDiscountBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAffiliateFee(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    affiliateFeeBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEditionMintPaused(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeRange(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalPrice(
    edition: PromiseOrValue<string>,
    mintId: PromiseOrValue<BigNumberish>,
    minter: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    affiliated: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawForAffiliate(
    affiliate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawForPlatform(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    affiliateFeesAccrued(
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createEditionMint(
      edition: PromiseOrValue<string>,
      merkleRootHash: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxMintable_: PromiseOrValue<BigNumberish>,
      maxMintablePerAccount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAffiliated(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      requestedQuantity: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintedTallies(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleInterfaceId(overrides?: CallOverrides): Promise<string>;

    nextMintId(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeesAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    setAffiliateDiscount(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateDiscountBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAffiliateFee(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateFeeBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEditionMintPaused(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeRange(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalPrice(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      minter: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      affiliated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawForAffiliate(
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawForPlatform(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AffiliateDiscountSet(address,uint256,uint16)"(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      discountBPS?: null
    ): AffiliateDiscountSetEventFilter;
    AffiliateDiscountSet(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      discountBPS?: null
    ): AffiliateDiscountSetEventFilter;

    "AffiliateFeeSet(address,uint256,uint16)"(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      feeBPS?: null
    ): AffiliateFeeSetEventFilter;
    AffiliateFeeSet(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      feeBPS?: null
    ): AffiliateFeeSetEventFilter;

    "DropClaimed(address,uint32)"(
      recipient?: null,
      quantity?: null
    ): DropClaimedEventFilter;
    DropClaimed(recipient?: null, quantity?: null): DropClaimedEventFilter;

    "MerkleDropMintCreated(address,uint256,bytes32,uint96,uint32,uint32,uint32,uint32)"(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      merkleRootHash?: null,
      price?: null,
      startTime?: null,
      endTime?: null,
      maxMintable?: null,
      maxMintablePerAccount?: null
    ): MerkleDropMintCreatedEventFilter;
    MerkleDropMintCreated(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      merkleRootHash?: null,
      price?: null,
      startTime?: null,
      endTime?: null,
      maxMintable?: null,
      maxMintablePerAccount?: null
    ): MerkleDropMintCreatedEventFilter;

    "MintConfigCreated(address,address,uint256,uint32,uint32)"(
      edition?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      mintId?: null,
      startTime?: null,
      endTime?: null
    ): MintConfigCreatedEventFilter;
    MintConfigCreated(
      edition?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      mintId?: null,
      startTime?: null,
      endTime?: null
    ): MintConfigCreatedEventFilter;

    "MintPausedSet(address,uint256,bool)"(
      edition?: PromiseOrValue<string> | null,
      mintId?: null,
      paused?: null
    ): MintPausedSetEventFilter;
    MintPausedSet(
      edition?: PromiseOrValue<string> | null,
      mintId?: null,
      paused?: null
    ): MintPausedSetEventFilter;

    "TimeRangeSet(address,uint256,uint32,uint32)"(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): TimeRangeSetEventFilter;
    TimeRangeSet(
      edition?: PromiseOrValue<string> | null,
      mintId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): TimeRangeSetEventFilter;
  };

  estimateGas: {
    affiliateFeesAccrued(
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createEditionMint(
      edition: PromiseOrValue<string>,
      merkleRootHash: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxMintable_: PromiseOrValue<BigNumberish>,
      maxMintablePerAccount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAffiliated(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      requestedQuantity: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintedTallies(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleInterfaceId(overrides?: CallOverrides): Promise<BigNumber>;

    nextMintId(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeesAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    setAffiliateDiscount(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateDiscountBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAffiliateFee(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateFeeBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEditionMintPaused(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeRange(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPrice(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      minter: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      affiliated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawForAffiliate(
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawForPlatform(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    affiliateFeesAccrued(
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createEditionMint(
      edition: PromiseOrValue<string>,
      merkleRootHash: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      maxMintable_: PromiseOrValue<BigNumberish>,
      maxMintablePerAccount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAffiliated(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      requestedQuantity: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintedTallies(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleInterfaceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMintId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeesAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAffiliateDiscount(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateDiscountBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAffiliateFee(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      affiliateFeeBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEditionMintPaused(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeRange(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPrice(
      edition: PromiseOrValue<string>,
      mintId: PromiseOrValue<BigNumberish>,
      minter: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      affiliated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawForAffiliate(
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForPlatform(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
